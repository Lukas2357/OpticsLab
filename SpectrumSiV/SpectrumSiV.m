%
%,------------------------------------------------------------------------,
%| Spectral fit program for SiV center    (Lukas Hunold @17/01/21)  V 2.2 |
%'------------------------------------------------------------------------'
%
%In this script a spectrum with SiV emission can be plotted and fitted.
%Fitting range and method (Gauss, Lorentz, Tangent, Voigt) can be adjusted. 
%A background correction is possible, if a background spectrum file is 
%provided in the data folder. You can run the program immediately without 
%changing anything to analyse the test file provided in the data folder. 

close all           %Used to close all open figures, remove it to keep them
clear variables     %Used to delete variables in workspace, should be kept
%#ok<*UNRCH>

%By this you know what the program does. To analyse your personal data, you 
%have to provide the program an .asc file with two columns containing the 
%wavelength and the corresponding number of counts (generated by the 
%spectrometer). Put the file in the folder 'Data' contained in this folder.
%Then enter the name of that file in the following line, by replacing test 
%with the name of your file:
signalFile = 'test';
%Do the same for your background file in the following line, if you have 
%one and added it to the data folder:
BgFile = 'test_bg';
%If you dont have one, leave the BackgroundCorrection option below 
%deactivated, the program will just skip the background correction.
%
%By default the program will plot the spectrum that you obtained, fit it
%with a Lorentzian, Gaussian and Voigt model and plot the results. The
%selected wavelength range for the fit is 738 +/- 12 nm and an aquisition
%time of 10s is assumed. You can change these settings below, if you want.


%% ---- Parameters to be predefined ---------------------------------------

%These parameters you should adjust according to what you need:

CENTRAL_WL  = 739;           %central wavelength for fitting, enter roughly
                             %the value where your peak is located
WL_RANGE    = 15;            %range around the center which is fitted
                             %(make sure to not include the Raman line)
GUESS_WIDTH = 1;             %Estimated 1/e width of the peak, can be kept 
                             %usually at 1, but change if fit does not work

ACQUISITION_TIME = 10;       %acquisition time of the spectrometer in sec
                             %(used to scale the plot into counts per sec)


%% ---- Optional functions ------------------------------------------------

%In the following you find different options, that you might want to change
%to manipulate the behaviour of the program. If a number is assigned to the
%variables below, please only replace it by a number as well. If true is 
%assigned to a variable, you can change it to false to deactivate the
%option. Vice versa change false into true to activate it (instead of true
%and false you can also use 1 and 0 if you like). If you keep everything as
%it is the program will work as described above.

%If you have a background file you can activate the bg correction here:
BackgroundCorrection = true;
%You can provide a ratio for scaling the bg with respect to the signal:
BgRatio = 1;
%Or let the program do the scaling by comparing the Raman lines. This is
%only possible if they are clearly visible in both spectra:
RamanComparison = false;
%If you want to show the background in a plot, activate:
BackgroundPlot = true;
%And if you want to save this plot in output folder, activate:
SaveBackgroundPlot = true;

%Plotting the spectrum is possible by activating:
PlotSpectrum = true;
%And saving this plot in the Result folder contained in this folder, with:
SaveSpectrumPlot = true;

%Performing a Fit is done by activating one of the following options:
GaussFit   = true;
LorentzFit = true;
TangentFit = true;
VoigtFit   = true;

%And saving them with:
SaveGaussFit   = true;
SaveLorentzFit = true;
SaveTangentFit = true;
SaveVoigtFit   = true;

%To plot the residuals of your fit, activate:
PlotResiduals = 1;
%And give the number of bins here:
nBINS = 20;

%The rest of the script you should typically not change, except of course
%you are familiar with MATLAB and want to manually adjust the program.


%% ---- Data readout ------------------------------------------------------

cd 'Data'
Data = importdata([signalFile,'.asc']);
WL  = Data(:,1);
cps = Data(:,2)/ACQUISITION_TIME;
if BackgroundCorrection
    Baseline = importdata([BgFile,'.asc']);
    cpsBg = Baseline(:,2)/ACQUISITION_TIME;
end
cd ..


%% ---- Plot Data ---------------------------------------------------------

if PlotSpectrum
    
    figure('Position', [50 680 600 280])
    plot(WL,cps,'k.')
    xlabel ('WL / nm')
    ylabel ('cps')
    legend('Data of the spectrometer')
    xlim([min(WL),max(WL)])
    title('Spectrum overview')
 
    if SaveSpectrumPlot
        cd 'Result'   
        saveas(gcf,[signalFile,'-Spec'],'png');
        cd ..
    end

end


%% ---- BG correction -----------------------------------------------------

if BackgroundCorrection

    %When performing bg correction, cut in any case the Raman line from the
    %fitting intervall to avoid possible negative counts. To adjust the
    %relative intensity of signal and bg use the parameter bg-ratio.
    %Or otherwise use the Raman comparison as follows:

    if RamanComparison
        %Set here a threshold wavelength for searching for the Raman peak:
        WL0 = 730; 
        %And define if the search should be done below or above it:
        searchRamanBelow = true;
        searchRamanAbove = false;
        %No the ratio of the Raman lines is calculated and used further:
        if searchRamanBelow
            SignalRaman = max(cps  (WL<WL0));   %raman of the signal
            BgRaman     = max(cpsBg(WL<WL0));   %raman of the bg
            RamanRatio  = SignalRaman/BgRaman;  %Ratio of the two
            BgRatio     = RamanRatio;           %Set bg ratio to this ratio
        elseif searchRamanAbove
            SignalRaman = max(cps  (WL>WL0));   %raman of the signal
            BgRaman     = max(cpsBg(WL>WL0));   %raman of the bg
            RamanRatio  = SignalRaman/BgRaman;  %Ratio of the two
            BgRatio     = RamanRatio;           %Set bg ratio to this ratio
        end
    end

    %Now correct the signal by the scaled background:
    cps = cps - cpsBg*BgRatio;

    %The background can be plotted and this plot can be saved also:
    if BackgroundPlot
        figure('Position', [50 380 600 200])
        plot(WL,cps+cpsBg*BgRatio,'k')
        hold on
        plot(WL,cpsBg*BgRatio,'b')
        hold on
        plot(WL,cps,'r')
        xlabel('WL / nm')
        ylabel('cps')
        legend('Signal','Background','Signal-BG')
        xlim([min(WL),max(WL)])
        if SaveBackgroundPlot
            cd 'Result'
            saveas(gcf,[signalFile,'-bg'],'png');
            cd ..
        end
    end
end


%% ---- Fits -------------------------------------------------------------- 

%Define Gaussian fit function:
Gauss = @(mvGau,ampGau,stdGau,bgGau,x) ...
        ampGau .* exp(-((x-mvGau)/stdGau).^2/2) + bgGau;

%Define Lorentz fit function:
Lorentz = @(mvLor,ampLor,widthLor,bgLor,x) ...
          ampLor .* widthLor^2./((x-mvLor).^2+widthLor^2) + bgLor;
      
%Define Tangentian fit function:
Tangentian = @(ampTan,mvTan,widthTan,deltaTan,bgTan,x) ...
          ampTan .* (atan((x-mvTan+deltaTan./2)./widthTan) - ...
                     atan((x-mvTan-deltaTan./2)./widthTan))+ bgTan;

%Define Voigt fit function:
%Done in separate script, evaluate with fit2voigt(dat,params)
    
%Cut range for fitting:
fit_cps  = cps(WL>CENTRAL_WL-WL_RANGE & WL<CENTRAL_WL+WL_RANGE);
fit_WL   = WL(WL>CENTRAL_WL-WL_RANGE & WL<CENTRAL_WL+WL_RANGE);

%Determine maximum of counts and normalize the signal to be fitted:
maxFitcps = max(fit_cps);
fit_cps = fit_cps/maxFitcps;

%Guess initial parameter and bounds for fitting:
[iPeak,cpsPeak] = max(fit_cps);         %extract max counts as peak value
Baseline        = min(fit_cps);         %extract min counts as base value
centralWL       = fit_WL(cpsPeak);      %extract WL of the peak
width           = WL_RANGE/2;           %use half range as initial width
GuessParams     = [centralWL,iPeak-Baseline,width,Baseline];
lb              = [centralWL*(0.8),0,0,-iPeak];
ub              = [centralWL*(1.2),(iPeak-Baseline)*10,2*WL_RANGE,iPeak];


%% ---- Gauss Fit ---------------------------------------------------------

if GaussFit
    %Perform the fit and extract the parameters:
    [GauRes,GauGof,GauInfoout] = fit(fit_WL,fit_cps,Gauss,...
                        'StartPoint',GuessParams,'Lower',lb,'Upper',ub); 
    GaussParams  = coeffvalues(GauRes);
    GaussConf    = confint(GauRes,0.68);
    GaussWLc     = GauRes.mvGau;
    GaussWLcStd  = GauRes.mvGau - GaussConf(1,1);
    GaussFWHM    = 2*sqrt(log(2)*2)*GauRes.stdGau;
    GaussFWHMStd = (GauRes.stdGau-GaussConf(1,3))*GaussFWHM/GauRes.stdGau;
    GaussProfile = Gauss(GauRes.mvGau,GauRes.ampGau,...
                         GauRes.stdGau,GauRes.bgGau,WL);
    GaussFitProfile = Gauss(GauRes.mvGau,GauRes.ampGau,...
                            GauRes.stdGau,GauRes.bgGau,fit_WL);

    %Plot the spectrum with the fit:
    figure('Position', [700 800 600 200])
    plot(WL,GaussProfile,'LineWidth',1.5)
    hold on
    plot(WL,cps/maxFitcps,'.','MarkerSize',8)
    set(gca,'FontSize',11)
    title('Gauss fit')
    xlabel ('Wavelength / nm')
    ylabel ('normalized counts')
    xlim([CENTRAL_WL-WL_RANGE,CENTRAL_WL+WL_RANGE])
    ylim([0,1.1])
    legend('off')
    dim = [0.58 0.5 0.3 0.3];
    str = {strcat('\lambda_{ZPL} = ', ...
           sprintf(' (%.2f +/- %.2f) nm', ...
           GaussWLc,GaussWLcStd)), ...
           sprintf('FWHM = (%.2f +/- %.2f) nm',...
           GaussFWHM, GaussFWHMStd)};
    annotation('textbox',dim,'String',str,'FitBoxToText','on');

    %And optionally save it:
    if SaveGaussFit
        cd 'Result'    
        saveas(gcf,[signalFile,'-Gfit'],'png');
        cd ..
    end

    %If activated, also plot the residuals:
    if PlotResiduals
        GauResiduals = GaussFitProfile-fit_cps; 
        minGauResiduals = min(GauResiduals);
        maxGauResiduals = max(GauResiduals);
        binEdges = linspace(minGauResiduals,maxGauResiduals, nBINS+1);
        figure('Position', [1350 820 550 180])
        histogram(GauResiduals, binEdges);
        title ('Residuals of the Gauss-Fit')
        xlabel('fit - data')
        ylabel('counts per bin');
    end
    
end


%% ---- Lorentz Fit -------------------------------------------------------

if LorentzFit
    %Perform the fit and extract the parameters:
    [LorRes,LorGof,LorInfoout] = fit(fit_WL,fit_cps,Lorentz,...
                        'StartPoint',GuessParams,'Lower',lb,'Upper',ub);
    LorentzParams  = coeffvalues(LorRes);
    LorentzConf    = confint(LorRes,0.68);
    LorentzWLc     = LorRes.mvLor;
    LorentzWLcStd  = LorRes.mvLor - LorentzConf(1,1);
    LorentzFWHM    = LorRes.widthLor*2;
    LorentzFWHMStd = 2*(LorRes.widthLor - LorentzConf(1,3));
    LorentzProfile    = Lorentz(LorRes.mvLor,LorRes.ampLor,...
                         LorRes.widthLor,LorRes.bgLor,WL);
    LorentzFitProfile = Lorentz(LorRes.mvLor,LorRes.ampLor,...
                            LorRes.widthLor,LorRes.bgLor,fit_WL);

    %Plot the spectrum with the fit:
    figure('Position', [700 500 600 200])
    plot(WL,LorentzProfile,'LineWidth',1.5)
    hold on
    plot(WL,cps/maxFitcps,'.','MarkerSize',8)
    set(gca,'FontSize',11)
    title('Lorentz fit')
    xlabel ('Wavelength / nm')
    ylabel ('normalized counts')
    xlim([CENTRAL_WL-WL_RANGE,CENTRAL_WL+WL_RANGE])
    ylim([0,1.1])
    legend('off')
    dim = [0.58 0.5 0.3 0.3];
    str = {strcat('\lambda_{ZPL} = ', ...
           sprintf(' (%.2f +/- %.2f) nm', ...
           LorentzWLc,LorentzWLcStd)), ...
           sprintf('FWHM = (%.2f +/- %.2f) nm',...
           LorentzFWHM, LorentzFWHMStd)};
    annotation('textbox',dim,'String',str,'FitBoxToText','on');

    %And optionally save it:
    if SaveLorentzFit
        cd 'Result'    
        saveas(gcf,[signalFile,'-Lfit'],'png');
        cd ..
    end

    %If activated, also plot the residuals:
    if PlotResiduals
        LorResiduals = LorentzFitProfile-fit_cps;
        minLorResiduals = min(LorResiduals);
        maLorResiduals = max(LorResiduals);        
        nBINS = 20;
        binEdges = linspace(minLorResiduals,maLorResiduals, nBINS+1);
        figure('Position', [1350 560 550 180])
        h_L = histogram(LorResiduals, binEdges);
        title ('Residuals of the Lorentz-Fit')
        xlabel('fit - data')
        ylabel('counts per bin');
    end
    
end


%% ---- Tangentian fit ----------------------------------------------------

if TangentFit
    
    I_tan = LorRes.ampLor*LorRes.widthLor;

    [TanRes,TanGof,TanInfoout] = fit(fit_WL,fit_cps/max(fit_cps), ...
                                        Tangentian, ...
                                        'StartPoint',[I_tan,738,2,2,0], ...
                                        'Lower',[I_tan,736,0,0,0], ...
                                        'Upper',[I_tan,740,10,10,1]); 

    TanProfile    = Tangentian(TanRes.ampTan,TanRes.mvTan,...
                    TanRes.widthTan,TanRes.deltaTan,TanRes.bgTan,WL);
    TanFitProfile = Tangentian(TanRes.ampTan,TanRes.mvTan,...
                    TanRes.widthTan,TanRes.deltaTan,TanRes.bgTan,fit_WL);

    figure('Position', [50 80 600 200])
    plot(WL,TanProfile,'LineWidth',1.5)
    hold on
    plot(WL,cps/maxFitcps,'.','MarkerSize',8)
    set(gca,'FontSize',11)
    title('Tangentian fit')
    xlabel ('Wavelength / nm')
    ylabel ('normalized counts')
    xlim([CENTRAL_WL-WL_RANGE,CENTRAL_WL+WL_RANGE])
    ylim([0,1.1])
    legend('off')
    dim = [0.58 0.5 0.3 0.3];
    str = {strcat('\lambda_{ZPL} = ', sprintf(' (%.2f +/- %.2f) nm',...
           TanRes.mvTan,0.01)),sprintf('FWHM = (%.2f +/- %.2f) nm',...
           TanRes.widthTan, 0.01)};
    annotation('textbox',dim,'String',str,'FitBoxToText','on');
    
    %And optionally save it:
    if SaveTangentFit
        cd 'Result'    
        saveas(gcf,[signalFile,'-Tfit'],'png');
        cd ..
    end
    
    %If activated, also plot the residuals:
    if PlotResiduals
        TanResiduals = TanFitProfile-fit_cps;
        minTanResiduals = min(TanResiduals);
        maTanResiduals = max(TanResiduals);        
        nBINS = 20;
        binEdges = linspace(minTanResiduals,maTanResiduals, nBINS+1);
        figure('Position', [1350 300 550 180])
        h_T = histogram(TanResiduals, binEdges);
        title ('Residuals of the Tangent-Fit')
        xlabel('fit - data')
        ylabel('counts per bin');
    end

end


%% ---- Voigt fit ---------------------------------------------------------

if VoigtFit

    %To perform the Voigt fit, create a .txt file with four numbers in one
    %column giving the initial params for central WL, intensity, Gauss
    %width and Lorentz width and save it in the same folder.

    %Correct the data to set the baseline to zero:
    Data = [fit_WL,fit_cps-min(fit_cps)];

    %Now perform the Voigt fit as follows:
    VoigtParams = load('V_params.txt');
    [parmin,resnom,res,exitflag] = fit2voigt(Data,VoigtParams);
    VoigtProfile = voigt(WL,parmin);
    VoigtFitProfile = voigt(fit_WL,parmin);

    %Plot the spectrum with the fit:
    figure('Position', [700 70 600 320])
    plot(WL,VoigtProfile+min(fit_cps),'LineWidth',1.5)
    hold on
    plot(WL,cps/maxFitcps,'.','MarkerSize',8)
    set(gca,'FontSize',11)
    title('Voigt fit')
    xlabel ('Wavelength / nm')
    ylabel ('normalized counts')
    xlim([CENTRAL_WL-WL_RANGE,CENTRAL_WL+WL_RANGE])
    ylim([0,1.1])
    legend('off')
    dim = [0.55 0.56 0.3 0.3];
    str = {strcat('\lambda_{ZPL} = ', ...
           sprintf(' (%.2f +/- %.2f) nm', ...
           parmin(1),LorentzWLcStd)), ...
           sprintf('FWHM_L = (%.2f +/- %.2f) nm', ...
           parmin(4)*2, LorentzFWHMStd), ...
           sprintf('FWHM_G = (%.2f +/- %.2f) nm',...
           parmin(3)*2.355, GaussFWHMStd)};
    annotation('textbox',dim,'String',str,'FitBoxToText','on');

    %And optionally save it:
    if SaveVoigtFit
        cd 'Result'    
        saveas(gcf,[signalFile,'-Vfit'],'png');
        cd ..
    end
    
    %If activated, also plot the residuals:
    if PlotResiduals
        VoigtResiduals = VoigtFitProfile-fit_cps;
        minVoigtResiduals = min(VoigtResiduals);
        maVoigtResiduals = max(VoigtResiduals);        
        nBINS = 20;
        binEdges = linspace(minVoigtResiduals,maVoigtResiduals, nBINS+1);
        figure('Position', [1350 40 550 180])
        h_V = histogram(VoigtResiduals, binEdges);
        title ('Residuals of the Lorentz-Fit')
        xlabel('fit - data')
        ylabel('counts per bin');
    end

end
    

%% ---- Protocol of updates -----------------------------------------------

% 26.08.20 (V1.4):  - Sections introduced.
% 04.12.20 (V2.1):  - Fit confint intervals changed to one sigma
%                   - Plots aligned properly
%                   - Fits for not normalized data
%                   - Documentation improved
% 17.01.21 (V2.2):  - Tangentian fit included
%                   - Plot arrangement improved
%                   - Residual histograms adjusted
%
% 01.02.21 (V2.3):  - Warnings removed